# https://dev.azure.com/home-assistant

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - components/*
pr:
  - master
variables:
  - name: versionWheels
    value: '0.8'
  - group: wheels


jobs:


- job: 'JQ'
  pool:
    vmImage: 'ubuntu-latest'
  steps:
  - script: sudo apt-get install -y jq
    displayName: 'Install JQ'
  - bash: |
      shopt -s globstar
      cat **/*.json | jq '.'
    displayName: 'Run JQ'


- job: 'Wheels'
  condition: eq(variables['Build.SourceBranchName'], 'master')
  timeoutInMinutes: 360
  pool:
    vmImage: 'ubuntu-16.04'
  strategy:
    maxParallel: 3
    matrix:
      amd64:
        buildArch: 'amd64'
      i386:
        buildArch: 'i386'
      armhf:
        buildArch: 'armhf'
      armv7:
        buildArch: 'armv7'
      aarch64:
        buildArch: 'aarch64'
  steps:
  - script: |
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends \
        qemu-user-static \
        binfmt-support \
        curl \
        jq

      sudo mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc
      sudo update-binfmts --enable qemu-arm
      sudo update-binfmts --enable qemu-aarch64
    displayName: 'Initial cross build'
  - script: |
      mkdir -p .ssh
      echo -e "-----BEGIN RSA PRIVATE KEY-----\n$(wheelsSSH)\n-----END RSA PRIVATE KEY-----" >> .ssh/id_rsa
      ssh-keyscan -H $(wheelsHost) >> .ssh/known_hosts
      chmod 600 .ssh/*
    displayName: 'Install ssh key'
  - script: sudo docker pull homeassistant/$(buildArch)-wheels:$(versionWheels)
    displayName: 'Install wheels builder'
  - script: |
      for component in components/*; do
        manifest="$(jq --raw-output ".manifest" "${component}")"
        curl -s "${manifest}" | jq --raw-output '.requirements | join("\n")' >> requirements.txt
      done

      sudo docker run --rm -v $(pwd):/data:ro -v $(pwd)/.ssh:/root/.ssh:rw \
        homeassistant/$(buildArch)-wheels:$(versionWheels) \
        --apk "build-base;cmake;git;linux-headers;bluez-dev;libffi-dev;openssl-dev;glib-dev;eudev-dev;libxml2-dev;libxslt-dev;libpng-dev;libjpeg-turbo-dev;tiff-dev;autoconf;automake;cups-dev;linux-headers;gmp-dev;mpfr-dev;mpc1-dev;ffmpeg-dev" \
        --index $(wheelsIndex) \
        --requirement requirements.txt \
        --single \
        --upload rsync \
        --remote wheels@$(wheelsHost):/opt/wheels
    displayName: 'Run wheels build'
